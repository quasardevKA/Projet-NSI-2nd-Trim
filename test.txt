from flask import Flask, request, jsonify
from flask_socketio import SocketIO
import sqlite3
import uuid
from datetime import datetime

app = Flask(__name__)
socketio = SocketIO(app, cors_allowed_origins="*")

def get_db_connection():
    conn = sqlite3.connect('example.db')
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/send_message', methods=['POST'])
def send_message():
    session_cookie = request.cookies.get('session_cookie')
    data = request.get_json()
    contact_id = data.get('contact_id')
    message_content = data.get('message')

    if not session_cookie:
        return jsonify({'error': 'Session non valide'}), 401

    if not contact_id or not message_content:
        return jsonify({'error': 'Contact ID et message requis'}), 400

    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM users WHERE session_cookie = ?', (session_cookie,))
        user = cursor.fetchone()

    if not user:
        return jsonify({'error': 'Utilisateur introuvable'}), 404

    user_id = user['id']

    # Insérer le message dans la table conversations
    message_id = str(uuid.uuid4())  # Générer un identifiant unique pour le message
    with get_db_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO conversations (id, user_id, contact_id, last_message, publish_at)
            VALUES (?, ?, ?, ?, ?)
        ''', (message_id, user_id, contact_id, message_content, datetime.utcnow()))
        conn.commit()

    # Envoyer le message via WebSocket
    socketio.emit('receive_message', {
        'id': message_id,
        'sender_id': user_id,
        'message': message_content,
        'send_time': datetime.utcnow().isoformat() + 'Z',
        'to': contact_id
    }, room=contact_id)

    return jsonify({'success': True, 'message_id': message_id})

@socketio.on('send_message')
def handle_send_message(data):
    socketio.emit('receive_message', data, room=data['contact_id'])

@socketio.on('typing')
def handle_typing(data):
    socketio.emit('typing', data, room=data['to'])

@socketio.on('stop_typing')
def handle_stop_typing(data):
    socketio.emit('stop_typing', data, room=data['to'])

if __name__ == '__main__':
    socketio.run(app, debug=True)
